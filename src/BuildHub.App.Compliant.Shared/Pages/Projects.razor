@page "/projects"
@using BuildHub.App.Compliant.Application.Models
@using BuildHub.App.Compliant.Application.Services

@inject IProjectService ProjectService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Projects</PageTitle>

@if (_projects is null)
{
    <Loading />
}
else
{
    <MudContainer>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await OpenAddProjectDialog()" />
        @* <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddProjectDialog" /> *@
    </MudContainer>
    <MudContainer>
        <MudDataGrid T="ComplianceProjectViewModel" MultiSelection="true" Items="@_projects" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickFilter"
                     Hideable="true" Hover="true" RowClick="@RowClicked">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Projects</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="ComplianceProjectViewModel" />
                <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" Filterable="false" />
                <PropertyColumn Property="x => x.Reference" SortBy="@SortBy" />
                <PropertyColumn Property="x => x.Overview" />
                <PropertyColumn Property="x => x.StartDate" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ComplianceProjectViewModel" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
}

@code {
    private List<ComplianceProjectViewModel> _projects = null!;
    private string? _searchString;
    private Func<ComplianceProjectViewModel, object> SortBy => x => x.Reference;
    private Func<ComplianceProjectViewModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Reference.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        _projects = (await ProjectService.GetProjects(Guid.NewGuid())).ToList();
    }

    private void RowClicked(DataGridRowClickEventArgs<ComplianceProjectViewModel> args)
    {
        Navigation.NavigateTo($"/project/{args.Item.Id}");
    }
    
    private async Task OpenAddProjectDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<AddProjectDialog>("Add New Project", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            var newProject = (ComplianceProjectViewModel)result.Data!;
            _projects.Add(newProject);
            Snackbar.Add($"New project '{newProject.ProjectName}' added successfully!", Severity.Success);
        }
    }
}