@using BuildHub.App.Compliant.Application.Models
@using BuildHub.App.Compliant.Application.Services

<MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="HandleFileChangeAsync">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload Evidence
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if (_uploadedFiles != null)
{
    <MudList T="string">
        @foreach (var file in _uploadedFiles)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    [Parameter]
    public Action<EvidenceViewModel>? FilesUploaded { get; set; }
    
    [Inject]
    private IUploadService UploadService { get; set; }

    readonly IList<IBrowserFile> _uploadedFiles = new List<IBrowserFile>();
    
    private async Task HandleFileChangeAsync(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var fileStream = file.OpenReadStream(1024 * 1024 * 5);
            var memoryStream = new MemoryStream();
            
            await fileStream.CopyToAsync(memoryStream);

            _uploadedFiles.Add(file);

            var url = await UploadService.UploadEvidenceDocumentAsync(file.Name, memoryStream);
            
            FilesUploaded?.Invoke(new EvidenceViewModel
            {
                DocumentId = Guid.NewGuid(),
                Url = url,
                UploadDate = DateTime.UtcNow,
                UploadedBy = "AK"
            });
        }
    }
}